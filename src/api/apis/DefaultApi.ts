/* tslint:disable */
/* eslint-disable */
/**
 * OpenHPC
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  LoginReq,
  StatInfo,
  Token,
  VMCreatedInfo,
  VMDelReq,
  VMListRespInner,
  VMReq,
  VMReqAvailResources,
  VMTokenReq,
  VMTokenResp,
  VMUpgradeReq,
} from '../models/index';
import {
    LoginReqFromJSON,
    LoginReqToJSON,
    StatInfoFromJSON,
    StatInfoToJSON,
    TokenFromJSON,
    TokenToJSON,
    VMCreatedInfoFromJSON,
    VMCreatedInfoToJSON,
    VMDelReqFromJSON,
    VMDelReqToJSON,
    VMListRespInnerFromJSON,
    VMListRespInnerToJSON,
    VMReqFromJSON,
    VMReqToJSON,
    VMReqAvailResourcesFromJSON,
    VMReqAvailResourcesToJSON,
    VMTokenReqFromJSON,
    VMTokenReqToJSON,
    VMTokenRespFromJSON,
    VMTokenRespToJSON,
    VMUpgradeReqFromJSON,
    VMUpgradeReqToJSON,
} from '../models/index';

export interface StatContainerGetRequest {
    provider?: string;
}

export interface UserLoginPostRequest {
    loginReq?: LoginReq;
}

export interface UserRegisterPostRequest {
    loginReq?: LoginReq;
}

export interface VmDelPostRequest {
    vMDelReq?: VMDelReq;
}

export interface VmRequestPostRequest {
    vMReq?: VMReq;
}

export interface VmTokenPostRequest {
    vMTokenReq?: VMTokenReq;
}

export interface VmUpgradePostRequest {
    vMUpgradeReq?: VMUpgradeReq;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * 
     * 重启端口代理
     */
    async infraPxRestartGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apikey-header-Authorization authentication
        }

        const response = await this.request({
            path: `/infra/px/restart`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * 
     * 重启端口代理
     */
    async infraPxRestartGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.infraPxRestartGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * 
     * 容器统计
     */
    async statContainerGetRaw(requestParameters: StatContainerGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters['provider'] != null) {
            queryParameters['provider'] = requestParameters['provider'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/stat/container`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * 
     * 容器统计
     */
    async statContainerGet(requestParameters: StatContainerGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.statContainerGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * cpu状态
     */
    async statCpuGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/stat/cpu`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * 
     * cpu状态
     */
    async statCpuGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.statCpuGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * 
     * stat
     */
    async statGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StatInfo>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/stat`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatInfoFromJSON(jsonValue));
    }

    /**
     * 
     * stat
     */
    async statGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StatInfo> {
        const response = await this.statGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * 
     * 内存状态
     */
    async statMemGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/stat/mem`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * 
     * 内存状态
     */
    async statMemGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.statMemGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * 
     * Nvidia-SMI
     */
    async statNvidiaSmiGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/stat/nvidia-smi`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * 
     * Nvidia-SMI
     */
    async statNvidiaSmiGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.statNvidiaSmiGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * 
     * login
     */
    async userLoginPostRaw(requestParameters: UserLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Token>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/user/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginReqToJSON(requestParameters['loginReq']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenFromJSON(jsonValue));
    }

    /**
     * 
     * login
     */
    async userLoginPost(requestParameters: UserLoginPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Token> {
        const response = await this.userLoginPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * quota
     */
    async userQuotaGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/quota`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * 
     * quota
     */
    async userQuotaGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.userQuotaGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * 
     * register
     */
    async userRegisterPostRaw(requestParameters: UserRegisterPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/user/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginReqToJSON(requestParameters['loginReq']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * 
     * register
     */
    async userRegisterPost(requestParameters: UserRegisterPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.userRegisterPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * remove vm
     */
    async vmDelPostRaw(requestParameters: VmDelPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apikey-header-Authorization authentication
        }

        const response = await this.request({
            path: `/vm/del`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VMDelReqToJSON(requestParameters['vMDelReq']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * 
     * remove vm
     */
    async vmDelPost(requestParameters: VmDelPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.vmDelPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * list
     */
    async vmListGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<VMListRespInner>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apikey-header-Authorization authentication
        }

        const response = await this.request({
            path: `/vm/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VMListRespInnerFromJSON));
    }

    /**
     * 
     * list
     */
    async vmListGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<VMListRespInner>> {
        const response = await this.vmListGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * 
     * vm request info
     */
    async vmRequestAvailGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VMReqAvailResources>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apikey-header-Authorization authentication
        }

        const response = await this.request({
            path: `/vm/request/avail`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VMReqAvailResourcesFromJSON(jsonValue));
    }

    /**
     * 
     * vm request info
     */
    async vmRequestAvailGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VMReqAvailResources> {
        const response = await this.vmRequestAvailGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * 
     * vm request
     */
    async vmRequestPostRaw(requestParameters: VmRequestPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VMCreatedInfo>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apikey-header-Authorization authentication
        }

        const response = await this.request({
            path: `/vm/request`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VMReqToJSON(requestParameters['vMReq']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VMCreatedInfoFromJSON(jsonValue));
    }

    /**
     * 
     * vm request
     */
    async vmRequestPost(requestParameters: VmRequestPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VMCreatedInfo> {
        const response = await this.vmRequestPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Get VM\'s Token
     */
    async vmTokenPostRaw(requestParameters: VmTokenPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VMTokenResp>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apikey-header-Authorization authentication
        }

        const response = await this.request({
            path: `/vm/token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VMTokenReqToJSON(requestParameters['vMTokenReq']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VMTokenRespFromJSON(jsonValue));
    }

    /**
     * 
     * Get VM\'s Token
     */
    async vmTokenPost(requestParameters: VmTokenPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VMTokenResp> {
        const response = await this.vmTokenPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * VM upgrade
     */
    async vmUpgradePostRaw(requestParameters: VmUpgradePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VMCreatedInfo>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apikey-header-Authorization authentication
        }

        const response = await this.request({
            path: `/vm/upgrade`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VMUpgradeReqToJSON(requestParameters['vMUpgradeReq']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VMCreatedInfoFromJSON(jsonValue));
    }

    /**
     * 
     * VM upgrade
     */
    async vmUpgradePost(requestParameters: VmUpgradePostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VMCreatedInfo> {
        const response = await this.vmUpgradePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
